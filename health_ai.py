# -*- coding: utf-8 -*-
"""Health AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BuutPpF8aMgcM5rEYtARWjbadQcPWAE2
"""

!pip install Pypdf2

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2
import io

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    gen_tokens = outputs[0][inputs["input_ids"].shape[-1]:]
    response = tokenizer.decode(gen_tokens, skip_special_tokens=True).strip()
    return response

def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

# --- Health Symptom Checker ---
def symptom_checker(symptoms):
    prompt = f"You are HealthAI, an intelligent healthcare assistant. A patient reports the following symptoms: {symptoms}. " \
             f"Provide possible common causes, self-care tips, and when to seek a doctor. Keep the explanation clear and simple."
    return generate_response(prompt, max_length=800)

# --- Health Policy Summarization ---
def health_policy_summarization(pdf_file, policy_text):
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
        summary_prompt = f"Summarize this healthcare policy or document. Highlight purpose, benefits for citizens, who is eligible, and how to access services:\n\n{content}"
    else:
        summary_prompt = f"Summarize this healthcare policy or document. Highlight purpose, benefits for citizens, who is eligible, and how to access services:\n\n{policy_text}"
    return generate_response(summary_prompt, max_length=1200)

# --- Health Q&A ---
def health_qa(user_question):
    prompt = f"You are HealthAI, a helpful healthcare assistant. Answer the following health-related question clearly and responsibly:\n\nQuestion: {user_question}\n\nAnswer:"
    return generate_response(prompt, max_length=600)

# --- Preventive Tips Generator ---
def preventive_tips(topic):
    prompt = f"Generate clear preventive healthcare tips about: {topic}. Focus on lifestyle, hygiene, and wellness. Keep it simple and actionable."
    return generate_response(prompt, max_length=600)

# Create Gradio interface
with gr.Blocks() as app:
    gr.Markdown("# ðŸ©º HealthAI â€“ Intelligent Healthcare Assistant")

    with gr.Tabs():
        # Symptom Checker
        with gr.TabItem("Symptom Checker"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, cough, body pain...",
                        lines=3
                    )
                    check_btn = gr.Button("Check Symptoms")
                with gr.Column():
                    symptoms_output = gr.Textbox(
                        label="AI Health Guidance",
                        lines=15,
                        show_copy_button=True
                    )
            check_btn.click(symptom_checker, inputs=symptoms_input, outputs=symptoms_output)

        # Policy Summarization
        with gr.TabItem("Health Policy Summarization"):
            with gr.Row():
                with gr.Column():
                    pdf_upload = gr.File(label="Upload Health Policy PDF", file_types=[".pdf"])
                    policy_text_input = gr.Textbox(
                        label="Or paste health policy text here",
                        placeholder="Paste health policy document text...",
                        lines=5
                    )
                    summarize_btn = gr.Button("Summarize Policy")
                with gr.Column():
                    summary_output = gr.Textbox(
                        label="Health Policy Summary",
                        lines=20,
                        show_copy_button=True
                    )
            summarize_btn.click(health_policy_summarization, inputs=[pdf_upload, policy_text_input], outputs=summary_output)

        # Health Q&A
        with gr.TabItem("Health Q&A"):
            with gr.Row():
                with gr.Column():
                    question_input = gr.Textbox(
                        label="Ask a Health Question",
                        placeholder="e.g., How can I prevent dengue?",
                        lines=3
                    )
                    ask_btn = gr.Button("Get Answer")
                with gr.Column():
                    answer_output = gr.Textbox(
                        label="AI Answer",
                        lines=15,
                        show_copy_button=True
                    )
            ask_btn.click(health_qa, inputs=question_input, outputs=answer_output)

        # Preventive Tips
        with gr.TabItem("Preventive Health Tips"):
            with gr.Row():
                with gr.Column():
                    topic_input = gr.Textbox(
                        label="Enter a Topic",
                        placeholder="e.g., diabetes, heart health, hygiene...",
                        lines=3
                    )
                    tips_btn = gr.Button("Get Tips")
                with gr.Column():
                    tips_output = gr.Textbox(
                        label="Preventive Healthcare Tips",
                        lines=15,
                        show_copy_button=True
                    )
            tips_btn.click(preventive_tips, inputs=topic_input, outputs=tips_output)

app.launch(share=True)